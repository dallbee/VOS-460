Phase 2 Notes
.st file is for stack
	input output when not running

stack pointer (sp) = 256 no stack exists

list<PCB *> jobs; //point to PCB, read outloud right to left
jobs-> ||---->||---->||
	  PCB0    PCB1   PCB2

Suggest everything private in PCB.
	Just list of items, and a few others.

Make OS a friend of PCB class.
	No other class needs PCB class access.

Make sure ot have queue<PCB *> readyQ, waitQ;
	Queue of pointers to PCB

VM returns status to OS when using PCB, if not completed or going to wait Queue


For Read/Write, IO ops:
FIRST: process whose IO operation completes goes to Ready Queue
	need to simulate interrupt
	in PCB interupt time 128 (another variable to have in PCB)
		simulation: Compare current time to int time, to see if ready
		check as many as you can.
Read it from .in file, which is the keyboard
	.out file is the monitor

Throughput = number of processes completed per unit time

At run time add 20 to the base for your program
load 2 20

1	Program 1 start (base)
.
.
.
49	end
50	Program 2 start (base)
.
.
.
89	end
90	Program 3 start (base)
.
.
.
150	end (limit?)


What should be in the PCB: program counter, registers, status register, stack pointer, base, limit,process name, fstreams associated with the .o, in, .out, .st files.

Program's WAIT TIME is the time spent WAITING in the Ready Queue, NOT time in the wait queue. The seconds means the CPU is waiting for the program to finish



